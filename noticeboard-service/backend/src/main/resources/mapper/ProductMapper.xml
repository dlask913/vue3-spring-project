<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.noticeboardservice.mapper.ProductMapper">
    <!-- 상품 등록 -->
    <insert id="insertProduct" parameterType="ProductRequestDto" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO Products (title, content, category, standard_price, owner_id, deadline)
        VALUES (#{title}, #{content}, #{category}, #{standardPrice}, #{ownerId}, #{deadline})
    </insert>

    <!-- 상품 단일 조회 -->
    <select id="findProduct" resultMap="ProductDetailsResponseDtoMap" parameterType="long">
        WITH ProductImg AS (
            SELECT *
            FROM Images
            WHERE image_type = 'PRODUCT'
        ),
        RankedBids AS (
            SELECT product_id, bid_price, customer_id,
                ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY created_at DESC) AS latest
            FROM Bid_History
        )

        SELECT A.id, A.title, A.content, A.category, A.standard_price, A.owner_id,
            COALESCE(B.img_url, '/image/productDefaultImg.jpg') AS img_url, A.post_date, A.deadline,
            c.bid_price AS latest_price, c.customer_id
        FROM Products A
            LEFT JOIN ProductImg B ON A.id = B.type_id
            LEFT JOIN RankedBids C ON A.id = C.product_id AND C.latest = 1
        WHERE A.id = #{id}
    </select>

    <!-- 상품 설명 수정 -->
    <update id="updateProduct" parameterType="ProductRequestDto">
        UPDATE Products
        SET title = #{title}, content = #{content}, standard_price = #{standardPrice}
        WHERE id = #{id}
    </update>

    <!-- 상품 삭제 -->
    <delete id="deleteProduct" parameterType="long">
        DELETE FROM Products
        WHERE id = #{id}
    </delete>

    <!-- 모든 상품들 삭제 -->
    <delete id="deleteAll">
        DELETE FROM Products
    </delete>

    <select id="findAllProducts" resultMap="ProductResponseDtoMap">
        WITH ProductImg AS (
            SELECT *
            FROM Images
            WHERE image_type = 'PRODUCT'
        )

        SELECT A.id, A.title, A.content, A.category, A.standard_price, A.owner_id,
            COALESCE(B.img_url, '/image/productDefaultImg.jpg') AS img_url, A.post_date
        FROM Products A
            LEFT JOIN ProductImg B ON A.id = B.type_id
    </select>

    <select id="searchProductsByKeyword" resultMap="ProductResponseDtoMap">
        WITH ProductImg AS (
            SELECT *
            FROM Images
            WHERE image_type = 'PRODUCT'
        ),
        RankedBids AS (
            SELECT product_id, bid_price, customer_id,
            ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY created_at DESC) AS latest
            FROM Bid_History
        )

        SELECT A.id, A.title, A.content, A.category, COALESCE(C.bid_price, A.standard_price) AS standard_price,
            A.owner_id, COALESCE(B.img_url, '/image/productDefaultImg.jpg') AS img_url, A.post_date
        FROM Products A
            LEFT JOIN ProductImg B ON A.id = B.type_id
            LEFT JOIN RankedBids C ON A.id = C.product_id AND C.latest = 1
        WHERE 1=1
        <if test="params.title != null">
            AND A.title LIKE CONCAT('%', #{params.title}, '%')
        </if>
        <if test="params.content != null">
            AND A.content LIKE CONCAT('%', #{params.content}, '%')
        </if>
        ORDER BY A.${sortKey} ${order}
    </select>

    <!-- 카테고리별 상품 조회 -->
    <select id="findProductsByCategory" parameterType="string" resultMap="ProductResponseDtoMap">
        WITH ProductImg AS (
            SELECT *
            FROM Images
            WHERE image_type = 'PRODUCT'
        )

        SELECT A.id, A.title, A.content, A.category, A.standard_price, A.owner_id,
            COALESCE(B.img_url, '/image/productDefaultImg.jpg') AS img_url, A.post_date
        FROM Products A
            LEFT JOIN ProductImg B ON A.id = B.type_id
        WHERE category = #{category}
    </select>

    <select id="findProductsByMemberId" resultMap="ProductResponseDtoMap">
        SELECT id, title, content, category, NULL AS standard_price, owner_id AS owner_id,
            NULL AS img_url, post_date
        FROM Products
        WHERE owner_id = #{memberId}
    </select>

    <select id="findProductsByDeadline" resultMap="ProductResponseDtoMap">
        SELECT id, title, content, category, NULL AS standard_price, owner_id AS owner_id,
        NULL AS img_url, post_date
        FROM Products
        WHERE DATE(deadline) = CURRENT_DATE();
    </select>


    <!-- record 에는 setter 가 존재하지 않기 때문에 생성자 기반 필드 매핑 -->
    <resultMap id="ProductResponseDtoMap" type="com.example.noticeboardservice.dto.ProductResponseDto">
        <constructor>
            <arg column="id" javaType="java.lang.Long"/>
            <arg column="title" javaType="java.lang.String"/>
            <arg column="content" javaType="java.lang.String"/>
            <arg column="category" javaType="java.lang.String"/>
            <arg column="standard_price" javaType="java.lang.Integer"/>
            <arg column="img_url" javaType="java.lang.String"/>
            <arg column="owner_id" javaType="java.lang.Long"/>
            <arg column="post_date" javaType="java.lang.String"/>
        </constructor>
    </resultMap>

    <resultMap id="ProductDetailsResponseDtoMap" type="com.example.noticeboardservice.dto.ProductDetailsResponseDto">
        <constructor>
            <arg column="id" javaType="java.lang.Long"/>
            <arg column="title" javaType="java.lang.String"/>
            <arg column="content" javaType="java.lang.String"/>
            <arg column="category" javaType="java.lang.String"/>
            <arg column="standard_price" javaType="java.lang.Integer"/>
            <arg column="latest_price" javaType="java.lang.Integer"/>
            <arg column="img_url" javaType="java.lang.String"/>
            <arg column="owner_id" javaType="java.lang.Long"/>
            <arg column="customer_id" javaType="java.lang.Long"/>
            <arg column="post_date" javaType="java.lang.String"/>
            <arg column="deadline" javaType="java.lang.String"/>
        </constructor>
    </resultMap>
</mapper>