<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.noticeboardservice.mapper.CommentMapper">
    <!-- 댓글 생성 -->
    <insert id="insertComment" parameterType="CommentRequestDto">
        INSERT INTO Comments (content, member_id, notice_id)
        VALUES (#{content}, #{memberId}, #{noticeId})
    </insert>

    <!-- 댓글 수정 -->
    <update id="updateComment" parameterType="CommentRequestDto">
        UPDATE Comments
        SET content = #{content}, update_date = NOW()
        WHERE id = #{id}
    </update>

    <!-- 댓글 조회 by Notice -->
    <select id="findCommentsByNoticeId" resultMap="CommentResponseDtoMap" parameterType="long">
        WITH MemberImages AS (
            SELECT type_id, img_url
            FROM Images
            WHERE image_type = 'MEMBER'
        )

        SELECT c.id, c.content, c.post_date, m.username,
        COALESCE(i.img_url, '/image/memberDefaultImg.jpg') AS member_img_url, c.member_id, c.notice_id
        FROM Comments c
            LEFT JOIN Members m ON c.member_id = m.id
            LEFT JOIN MemberImages i ON m.id = i.type_id
        WHERE c.notice_id = #{noticeId}
    </select>

    <!-- 댓글 삭제 -->
    <delete id="deleteComment" parameterType="long">
        DELETE FROM Comments
        WHERE id = #{id}
    </delete>

    <!-- 댓글 데이터 모두 조회 -->
    <select id="findAllComments" resultMap="CommentResponseDtoMap">
        SELECT c.id, c.content, c.post_date, m.username, c.member_id, c.notice_id, NULL AS member_img_url
        FROM Comments c
            LEFT JOIN Members m ON c.member_id = m.id
    </select>

    <!-- 댓글 데이터 모두 삭제 -->
    <delete id="deleteAll" >
        DELETE FROM Comments
    </delete>

    <!-- 내가 작성한 댓글 조회 -->
    <select id="findCommentsByEmail" resultMap="CommentResponseDtoMap" parameterType="String">
        SELECT c.id, c.content, c.post_date, m.username, c.member_id, c.notice_id, NULL AS member_img_url
        FROM Comments c
            LEFT JOIN Members m ON c.member_id = m.id
        WHERE m.email = #{email}
    </select>

    <!-- record 에는 setter 가 존재하지 않기 때문에 생성자 기반 필드 매핑 -->
    <resultMap id="CommentResponseDtoMap" type="com.example.noticeboardservice.dto.CommentResponseDto">
        <constructor>
            <arg column="id" javaType="java.lang.Long"/>
            <arg column="content" javaType="java.lang.String"/>
            <arg column="post_date" javaType="java.lang.String"/>
            <arg column="username" javaType="java.lang.String"/>
            <arg column="member_img_url" javaType="java.lang.String"/>
            <arg column="member_id" javaType="java.lang.Long"/>
            <arg column="notice_id" javaType="java.lang.Long"/>
        </constructor>
    </resultMap>
</mapper>